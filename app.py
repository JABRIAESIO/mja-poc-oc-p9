import streamlit as st
import os
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
import time
import glob
import random
import traceback
import json
import requests
import sys
import platform
import psutil
import shutil  # AJOUT DEBUG - pour v√©rification espace disque

# Configuration essentielle AVANT tout autre code
os.environ['KERAS_BACKEND'] = 'tensorflow'

# Configuration de la page
st.set_page_config(
    page_title="Classifieur d'Images - Flipkart",
    page_icon="üõí",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Imports apr√®s configuration
from models.model_loader import load_categories, get_model_paths, get_hugging_face_token, HF_MODEL_URL
from models.inference import predict_image, plot_prediction_bars
from utils.preprocessing import preprocess_image_for_convnext, resize_and_pad_image, apply_data_augmentation

# NOUVEAU : Import du module EDA
from eda_module import display_eda_mode

# Nouvelle fonction pour charger le mod√®le depuis Hugging Face
def load_model_from_huggingface():
    """Charge le mod√®le depuis Hugging Face avec gestion d'erreurs robuste"""
    try:
        # Import conditionnel pour √©viter les erreurs
        from models.model_loader import load_efficientnet_transformer_model

        with st.spinner('T√©l√©chargement du mod√®le depuis Hugging Face...'):
            model = load_efficientnet_transformer_model()
            return model
    except ImportError as e:
        st.error(f"Erreur d'import : {str(e)}")
        return None
    except Exception as e:
        st.error(f"Erreur lors du chargement du mod√®le : {str(e)}")
        return None

# CSS pour am√©liorer l'accessibilit√©
st.markdown("""
<style>
    /* Augmenter le contraste des textes */
    .stMarkdown, .stText, .stHeading, .stButton, .stRadio, h1, h2, h3, p {
        color: #191919 !important;
    }

    /* Augmenter la taille de la police pour une meilleure lisibilit√© */
    .stMarkdown, .stText, p {
        font-size: 16px !important;
    }

    /* Meilleur contraste pour les titres */
    h1, h2, h3, .stHeading {
        font-weight: 600 !important;
    }

    /* Assurer que les liens sont facilement identifiables */
    a {
        color: #0056b3 !important;
        text-decoration: underline !important;
    }

    /* Focus visible pour les √©l√©ments interactifs */
    button:focus, input:focus, select:focus {
        outline: 3px solid #4299e1 !important;
        outline-offset: 2px !important;
    }

    /* Am√©liorer la visibilit√© des boutons */
    .stButton button {
        font-weight: 500 !important;
        padding: 0.5rem 1rem !important;
        border-radius: 6px !important;
        transition: background-color 0.3s ease !important;
    }

    /* Am√©lioration des boutons au hover */
    .stButton button:hover {
        background-color: #0056b3 !important;
        color: white !important;
    }

    /* Meilleur espacement pour les √©l√©ments de formulaire */
    .stRadio, .stSelectbox, .stFileUploader {
        margin-bottom: 1.5rem !important;
    }

    /* Messages d'erreur avec meilleur contraste */
    .stError, .element-container .stError {
        background-color: #ffd6d6 !important;
        border-left: 5px solid #ff4b4b !important;
        padding: 10px !important;
        margin-bottom: 1rem !important;
    }

    /* Messages de succ√®s avec meilleur contraste */
    .stSuccess, .element-container .stSuccess {
        background-color: #d4edda !important;
        border-left: 5px solid #00cc88 !important;
        padding: 10px !important;
        margin-bottom: 1rem !important;
    }

    /* Messages d'info avec meilleur contraste */
    .stInfo, .element-container .stInfo {
        background-color: #e7f3ff !important;
        border-left: 5px solid #0068c9 !important;
        padding: 10px !important;
        margin-bottom: 1rem !important;
    }

    /* Am√©lioration de l'accessibilit√© des tableaux */
    .stTable table {
        border-collapse: collapse !important;
        width: 100% !important;
    }

    .stTable th, .stTable td {
        border: 1px solid #ddd !important;
        padding: 12px !important;
        text-align: left !important;
    }

    .stTable th {
        background-color: #f5f5f5 !important;
        font-weight: bold !important;
    }

    /* Am√©lioration de l'accessibilit√© du spinner */
    .stSpinner {
        color: #0068c9 !important;
    }

    /* Indicateur de progression accessible */
    .stProgress .st-bo {
        background-color: #00cc88 !important;
    }

    /* Radio buttons plus grands pour faciliter l'utilisation */
    .stRadio > div {
        gap: 0.5rem !important;
    }

    /* Skip navigation link (cach√© visuellement mais accessible aux lecteurs d'√©cran) */
    .skip-nav {
        position: absolute !important;
        top: -40px !important;
        left: 0 !important;
        background: #000 !important;
        color: #fff !important;
        padding: 8px !important;
        text-decoration: none !important;
        z-index: 1000 !important;
    }

    .skip-nav:focus {
        top: 0 !important;
    }
</style>
""", unsafe_allow_html=True)

def test_hugging_face_connection():
    """Teste la connexion √† Hugging Face en v√©rifiant l'acc√®s au mod√®le."""
    try:
        hf_token = get_hugging_face_token()
        headers = {}
        if hf_token:
            headers["Authorization"] = f"Bearer {hf_token}"
            st.info("üîë Token d'authentification trouv√©")
        else:
            st.warning("‚ö†Ô∏è Aucun token d'authentification trouv√©")

        with st.spinner("Test de connexion en cours..."):
            response = requests.get(
                HF_MODEL_URL,
                headers=headers,
                stream=True,
                timeout=10,
                allow_redirects=True
            )

            # Lire juste un peu de contenu pour confirmer l'acc√®s
            for chunk in response.iter_content(chunk_size=1024):
                break

            if response.status_code == 200:
                size_mb = int(response.headers.get('content-length', 0)) / (1024 * 1024)
                st.success(f"‚úÖ Connexion r√©ussie! Taille du mod√®le: {size_mb:.2f} MB")
                return True
            else:
                st.error(f"‚ùå Erreur HTTP {response.status_code}")
                return False
    except Exception as e:
        st.error(f"‚ùå Erreur de connexion: {str(e)}")
        return False

def load_example_images():
    """Charge les exemples d'images disponibles dans le dossier assets/examples"""
    examples_dir = os.path.join("assets", "examples")
    if not os.path.exists(examples_dir):
        st.warning(f"‚ö†Ô∏è Le dossier d'exemples '{examples_dir}' n'existe pas.")
        return []

    image_files = [f for f in os.listdir(examples_dir) if f.endswith(('.jpg', '.jpeg', '.png'))]
    if not image_files:
        st.warning(f"‚ö†Ô∏è Aucune image trouv√©e dans le dossier '{examples_dir}'")
        return []

    return [os.path.join(examples_dir, f) for f in image_files]

# Fonction load_model() modifi√©e selon les recommandations
@st.cache_resource(show_spinner=False)
def load_model():
    """Charge le mod√®le avec une gestion robuste des erreurs"""
    try:
        with st.spinner('Chargement du mod√®le (2-3 minutes pour la premi√®re ex√©cution)...'):
            # Obtention des chemins
            paths = get_model_paths()

            # AJOUT DEBUG - V√©rification de l'espace disque
            total, used, free = shutil.disk_usage("/")
            st.write(f"Espace disque disponible : {free // (2**30)} Go")

            # AJOUT DEBUG - V√©rification de la pr√©sence effective du fichier
            if os.path.exists(paths['convnext_model']):
                st.success(f"Fichier mod√®le trouv√© : {paths['convnext_model']}")
                st.write(f"Taille : {os.path.getsize(paths['convnext_model']) / 1e6:.2f} MB")
            else:
                st.error("Fichier mod√®le absent !")

            model = load_model_from_huggingface()
            categories = load_categories()

            if model is None:
                st.error("""
                **√âchec critique** : Le mod√®le n'a pas pu √™tre charg√©.
                Causes possibles :
                - Probl√®me de connexion avec Hugging Face
                - Format de mod√®le incompatible
                - Espace disque insuffisant
                """)
                st.stop()

            return model, categories

    except Exception as e:
        st.error(f"Erreur irr√©cup√©rable : {str(e)}")
        st.stop()

def display_prediction_results(result):
    """Affiche les r√©sultats de pr√©diction de mani√®re organis√©e et accessible"""
    if "error" in result:
        st.error(f"Erreur lors de la pr√©diction: {result['error']}")
        return

    predicted_class = result["predicted_class"]
    confidence = result["confidence"]
    all_predictions = result["all_predictions"]

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("R√©sultat de la classification")

        # Utiliser des √©l√©ments s√©mantiques pour une meilleure accessibilit√©
        st.markdown("### Pr√©diction principale")
        st.success(f"**Cat√©gorie pr√©dite**: {predicted_class}")

        # Barre de progression avec label associ√©
        st.markdown(f"**Niveau de confiance**: {confidence*100:.2f}%")
        st.progress(confidence)

        # Tableau accessible avec headers explicites
        st.markdown("### Toutes les probabilit√©s")
        results_table = []

        for pred in all_predictions:
            results_table.append({
                "Cat√©gorie": pred["class_name"],
                "Probabilit√©": f"{pred['probability']*100:.2f}%"
            })

        # Tableau avec titre pour l'accessibilit√©
        st.markdown("Tableau des probabilit√©s par cat√©gorie :")
        st.table(results_table)

    with col2:
        st.markdown("### Visualisation graphique")

        # Texte alternatif pour le graphique
        prediction_dict = {pred["class_name"]: pred["probability"] for pred in all_predictions}

        # Description textuelle du graphique pour l'accessibilit√©
        st.markdown("**Description du graphique**: Graphique √† barres horizontales montrant les probabilit√©s de classification pour chaque cat√©gorie.")

        fig = plot_prediction_bars(prediction_dict)

        # Alt text personnalis√© pour le graphique
        st.pyplot(fig, use_container_width=True)

        # Description d√©taill√©e sous le graphique
        st.markdown(f"**R√©sum√© du graphique**: La cat√©gorie '{predicted_class}' a la probabilit√© la plus √©lev√©e ({confidence*100:.2f}%). Les autres cat√©gories ont des probabilit√©s inf√©rieures.")

    # Informations sur les performances dans un expander
    with st.expander("Informations sur les performances"):
        st.markdown(f"""
        - **Temps de pr√©traitement**: {result['preprocess_time']*1000:.2f} ms
        - **Temps d'inf√©rence**: {result['inference_time']*1000:.2f} ms
        - **Temps total**: {result['total_time']*1000:.2f} ms
        """)

def process_uploaded_image(uploaded_file, model, categories):
    """Traite une image t√©l√©charg√©e et affiche les r√©sultats"""
    try:
        image = Image.open(uploaded_file)
        # Afficher l'image avec description alternative accessible
        st.image(
            image,
            caption=f"Image t√©l√©charg√©e: {uploaded_file.name}",
            width=400,
            output_format="PNG"
        )

        # Description alternative pour l'accessibilit√©
        st.markdown(f"**Description de l'image**: {uploaded_file.name} - Image t√©l√©charg√©e pour classification")

        if model is not None and categories is not None:
            with st.spinner("Classification en cours..."):
                result = predict_image(model, image, categories)
                display_prediction_results(result)
    except Exception as e:
        st.error(f"Erreur lors du traitement de l'image")
        with st.expander("D√©tails techniques de l'erreur"):
            st.error(f"Description: {str(e)}")
            st.code(traceback.format_exc())

def process_example_image(selected_example, model, categories):
    """Traite une image d'exemple et affiche les r√©sultats"""
    try:
        image = Image.open(selected_example)
        st.image(
            image,
            caption=f"Exemple: {os.path.basename(selected_example)}",
            width=400,
            output_format="PNG"
        )

        # Description alternative pour l'accessibilit√©
        st.markdown(f"**Description de l'image**: {os.path.basename(selected_example)} - Image d'exemple pour classification")

        if model is not None and categories is not None:
            with st.spinner("Classification en cours..."):
                result = predict_image(model, image, categories)
                display_prediction_results(result)
    except Exception as e:
        st.error(f"Erreur lors du traitement de l'image exemple")
        with st.expander("D√©tails techniques de l'erreur"):
            st.error(f"Description: {str(e)}")
            st.code(traceback.format_exc())

def display_classification_interface(model, categories):
    """Affiche l'interface de classification (code existant s√©par√©)"""
    # Interface pour s√©lectionner entre upload et exemples
    st.header("S√©lection de l'image")

    # Utilisation de st.container pour une meilleure organisation
    with st.container():
        st.subheader("Mode de saisie")
        source_option = st.radio(
            "Comment souhaitez-vous fournir une image?",
            ["T√©l√©charger une image", "Utiliser un exemple"],
            help="Choisissez si vous voulez t√©l√©charger votre propre image ou utiliser une image d'exemple"
        )

    if source_option == "T√©l√©charger une image":
        uploaded_file = st.file_uploader(
            "Choisissez une image √† classifier (JPG, JPEG ou PNG)",
            type=["jpg", "jpeg", "png"],
            help="L'image sera analys√©e par le mod√®le de classification"
        )

        if uploaded_file is not None:
            process_uploaded_image(uploaded_file, model, categories)
    else:
        examples = load_example_images()

        if examples:
            example_options = [os.path.basename(ex) for ex in examples]
            selected_example_name = st.selectbox(
                "S√©lectionnez une image exemple",
                example_options,
                help="Choisissez parmi les images d'exemple disponibles"
            )

            selected_example = next((ex for ex in examples if os.path.basename(ex) == selected_example_name), None)

            if selected_example:
                process_example_image(selected_example, model, categories)
        else:
            st.warning("Aucun exemple d'image n'a √©t√© trouv√©. Veuillez t√©l√©charger votre propre image.")

def main():
    # Ajouter un lien de navigation pour l'accessibilit√©
    st.markdown('<a href="#main-content" class="skip-nav">Aller au contenu principal</a>', unsafe_allow_html=True)

    # Sidebar avec informations syst√®me
    with st.sidebar:
        st.title("Informations syst√®me")

        system_info = {
            "Version Python": platform.python_version(),
            "M√©moire disponible": f"{psutil.virtual_memory().available / (1024 * 1024):.2f} MB",
            "Nombre de CPU": os.cpu_count(),
            "R√©pertoire de travail": os.getcwd()
        }

        for label, value in system_info.items():
            st.markdown(f"**{label}:** {value}")

        paths = get_model_paths()
        st.markdown("### Informations mod√®le")
        st.markdown(f"**URL Hugging Face:** {HF_MODEL_URL}")
        st.markdown(f"**Chemin local:** {paths['convnext_model']}")

        if st.button("Tester la connexion √† Hugging Face"):
            test_hugging_face_connection()

        # NOUVEAU : Navigation principale dans la sidebar
        st.markdown("---")
        st.subheader("Navigation")
        app_mode = st.radio(
            "Choisir le mode :",
            ["üîÆ Classification", "üìä Analyse des Donn√©es"],
            help="Mode Classification : classifiez vos images\nMode Analyse : explorez les donn√©es d'entra√Ænement"
        )

    # Titre principal avec ancre pour l'accessibilit√©
    st.markdown('<div id="main-content"></div>', unsafe_allow_html=True)
    st.title("üõí Classifieur d'Images - Flipkart")
    st.markdown("""
    Cette application permet de classifier des images selon diff√©rentes cat√©gories en utilisant un mod√®le ConvNeXtTiny.

    **Comment utiliser cette application:**
    1. T√©l√©chargez une image de produit
    2. Le mod√®le analysera automatiquement l'image
    3. Les r√©sultats de classification s'afficheront ci-dessous

    D√©velopp√© dans le cadre du projet 9 de la formation OpenClassrooms "Machine Learning Engineer".
    """)

    # Chargement du mod√®le avec la nouvelle fonction
    model, categories = load_model()

    # NOUVEAU : Conditionner l'affichage selon le mode s√©lectionn√©
    if app_mode == "üîÆ Classification":
        # Mode Classification (code existant)
        display_classification_interface(model, categories)
        
    elif app_mode == "üìä Analyse des Donn√©es":
        # NOUVEAU : Mode EDA
        display_eda_mode()

    # Pied de page
    st.markdown("---")
    st.markdown("""
    ### √Ä propos de cette application
    Cette application de classification d'images utilise un mod√®le ConvNeXtTiny entra√Æn√© sur un dataset Flipkart.
    Elle a √©t√© d√©velopp√©e dans le cadre du projet 9 de la formation OpenClassrooms "Machine Learning Engineer".

    Pour plus d'informations sur le mod√®le, consultez [Hugging Face](https://huggingface.co/mourad42008/convnext-tiny-flipkart-classification).
    """)

if __name__ == "__main__":
    main()
