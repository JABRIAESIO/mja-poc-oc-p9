import streamlit as st
from PIL import Image
import time
import numpy as np
import os

# Configurer la page Streamlit
st.set_page_config(
    page_title="Classifieur d'Images - Flipkart",
    page_icon="üõí",
    layout="wide"
)

# Afficher le titre et la description m√™me avant le chargement du mod√®le
st.title("üõí Classifieur d'Images - Flipkart")
st.markdown("""
Cette application permet de classer des images de produits en diff√©rentes cat√©gories.
Chargez une image et le mod√®le d√©tectera la cat√©gorie du produit.
""")

# Cr√©er un placeholder pour les messages de chargement
loading_placeholder = st.empty()

# Importer les fonctions de model_loader avec le placeholder
# Cela permet d'afficher l'interface pendant le chargement du mod√®le
from models.model_loader import load_efficientnet_transformer_model, load_categories, preprocess_image_for_convnext

# Charger les cat√©gories
categories = load_categories()

# Charger le mod√®le avec affichage de progression
loading_placeholder.info("Initialisation du mod√®le en cours... Cela peut prendre quelques minutes.")
model = load_efficientnet_transformer_model(loading_placeholder)

# Fonction de pr√©diction
def predict_image(image):
    try:
        # Pr√©traiter l'image
        img_array = preprocess_image_for_convnext(image)
        
        # Faire la pr√©diction
        prediction = model.predict(img_array)
        
        # Obtenir la classe pr√©dite
        predicted_class = np.argmax(prediction[0])
        confidence = float(prediction[0][predicted_class])
        
        # Obtenir le nom de la cat√©gorie
        category_name = categories.get(predicted_class, f"Cat√©gorie {predicted_class}")
        
        return {
            "category_id": predicted_class,
            "category_name": category_name,
            "confidence": confidence
        }
    except Exception as e:
        st.error(f"Erreur lors de la pr√©diction: {str(e)}")
        return None

# Interface utilisateur pour le t√©l√©chargement d'images
st.header("üì§ T√©l√©chargez une image de produit")
uploaded_file = st.file_uploader("Choisissez une image...", type=["jpg", "jpeg", "png"])

# Si le mod√®le est charg√© et qu'une image est t√©l√©charg√©e
if model is not None and uploaded_file is not None:
    # Afficher l'image
    image = Image.open(uploaded_file)
    col1, col2 = st.columns(2)
    
    with col1:
        st.image(image, caption="Image t√©l√©charg√©e", use_column_width=True)
    
    # Pr√©diction
    with col2:
        st.subheader("R√©sultat de la classification")
        with st.spinner("Classification en cours..."):
            result = predict_image(image)
        
        if result:
            st.success(f"Cat√©gorie pr√©dite: **{result['category_name']}**")
            st.progress(result["confidence"])
            st.info(f"Confiance: {result['confidence']*100:.2f}%")
elif model is None:
    st.warning("Le mod√®le n'a pas pu √™tre charg√©. Veuillez r√©essayer plus tard.")

# Afficher des informations sur le mod√®le
st.sidebar.header("√Ä propos du mod√®le")
st.sidebar.markdown("""
Ce mod√®le utilise une architecture ConvNeXt Tiny fine-tun√©e sur un dataset 
de produits Flipkart pour classifier les images en 7 cat√©gories.
""")

st.sidebar.subheader("Cat√©gories support√©es")
for cat_id, cat_name in categories.items():
    st.sidebar.write(f"- {cat_name}")

# Afficher des informations sur l'application
st.sidebar.header("√Ä propos de l'application")
st.sidebar.markdown("""
Cette application a √©t√© d√©velopp√©e dans le cadre du projet 9 
de la formation OpenClassrooms "Machine Learning Engineer".
""")
